// Arkoi

fun main(): i32 {
    const targetStruct = structNodes.get(0)
    const structRef = visit(targetStruct)

    const structVariable = builderRef.buildAlloca(structRef)
    for(const index in 0..100) {
        const variableNode = targetStruct.variables.get(index)
        const variableEP = builderRef.buildStructGEP(structVariable, index)
        
        const expression = resolveExpression(structCreateNode, variableNode) or error(
            "Couldn't find an expression for this variable."
        )
        builderRef.buildStore(variableEP, expression)
    }

    builderRef.buildLoad(structVariable)

    return 0
}

fun resolveExpression(structCreateNode: structCreateNode, variableNode: VariableNode): ValueRef?  {
    var expression: ValueRef?

    for(const index in 0..structCreateNode.argumentList.size) {
        const argumentNode = structCreateNode.argumentList.get(index)
        
        if(argumentNode.name.equals(variableNode.name)) {
            expression = visit(argumentNode)
            break
        }
    }

    if(!expression && variableNode.expression) {
        const storedObj = visit(variableNode.expression)
        if(storedObj !is ValueRef) error(
            "The result of the stored object for %s is not a ValueRef.", 
            variableNode.name
        )
        expression = storedObj
    }

    return expression
}

// Java 

public static void main(String[] args) {
    final StructNode targetStruct = structNodes.get(0);
    final LLVMTypeRef structRef = this.visit(targetStruct);
        
    final LLVMValueRef structVariable = this.getBuilderGen().buildAlloca(structRef);
    for (int index = 0; index < targetStruct.getVariables().size(); index++) {
        final VariableNode variableNode = targetStruct.getVariables().get(index);
        Objects.requireNonNull(variableNode.getName());
            
        final LLVMValueRef variableGEP = LLVM.LLVMBuildStructGEP(
            this.getBuilderGen().getBuilderRef(),
            structVariable,
            index,
            ""
        );
            
        LLVMValueRef expression = null;
        for (int argumentIndex = 0; argumentIndex < structCreateNode.getArgumentList().getArguments().size(); argumentIndex++) {
            final ArgumentNode argumentNode = structCreateNode.getArgumentList().getArguments().get(argumentIndex);
            Objects.requireNonNull(argumentNode.getName());
                
            if (variableNode.getName().getTokenContent().equals(argumentNode.getName().getTokenContent())) {
                expression = this.visit(argumentNode);
                break;
            }
        }
            
        if (expression == null && variableNode.getExpression() != null) {
            final Object object = this.visit(variableNode.getExpression());
            if (!(object instanceof LLVMValueRef))
                throw new NullPointerException();
            expression = (LLVMValueRef) object;
        }
            
        LLVM.LLVMBuildStore(this.getBuilderGen().getBuilderRef(), expression, variableGEP);
    }
    
    this.getBuilderGen().buildLoad(structVariable);
}
