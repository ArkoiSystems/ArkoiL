fun main(args: string[]): int {
  const u := Vector(-10, 12)
  const w := Vector(5, -10)
  const uw := u + v

  assert uw == Vector(-5, 2)
  
  return 0
}

struct Vector {
   
   # Constant values which are used to to specify the vector.
   const _x, _y: int
   
   # Through the pointer '->' you can set the target variable for the parameter.
   # This just works for constructors, because it will make some code smaller.
   Vector(x -> _x, y -> _y: int) := println("Created struct")
   
   # The '~' declares an destructor, which is called when the object get destroyed. 
   ~Vector() := println("Destroyed struct")

   # With 'overloaded functions' you can do stuff called "operator overloading".
   # These functions will help to improve / make the code more readable.
   #    For more informations: https://en.wikipedia.org/wiki/Operator_overloading
   #
   # These functions require an additional parameter which is used to declares
   # the LHS (left hand side) of the operation. The type for the parameter is not
   # predefined so several functions with different LHS types can be used.
   overload add(rhs: Vector) := Vector(this._x + rhs._x, this._y + rhs._y)

   overload sub(rhs: Vector) := Vector(this._x - rhs._x, this._y - rhs._y)

   overload mul(rhs: Vector) := Vector(this._x * rhs._x, this._y * rhs._y)

   overload div(rhs: Vector) := Vector(this._x / rhs._x, this._y / rhs._y)

   overload pow(rhs: Vector) := Vector(this._x ** rhs._x, this._y ** rhs._y)
   
   overload equ(rhs: Vector) := this._x == rhs._x && this._y == rhs._y
   
}
