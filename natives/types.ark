# Section for floating types

[type=double, bits=64, carryValue=true]
struct double {

    double(target: integral): double = llvm.int_to_double(target)

    operator +(other: integral): double = this::value + double(other)::value
    
    operator +(other: float): double = this::value + double(other)::value
    
}

[type=float, bits=32, carryValue=true]
struct float {
    
    float(target: integral): float = llvm.int_to_float(target)
    
    operator +(other: integral): float = value + float(other)::value
    
    operator +(other: double): double = double(this)::value + other::value
    
}

# Section for integral types

[type=integral, carryValue=true]
struct (<signType>[i|u])(<bits>[0-9]+) {

    this::name() {
        this::signed = this::signType == "i"
    }
    
    this::name(target: float): float = llvm.int_to_float(this)
    
    this::name(target: double): double = llvm.int_to_double(this)
    
    operator +(other: double): double = double(this)::value + other::value
    
    operator +(other: float): float = float(this)::value + other::value
    
}

fun @llvm.int_to_float(int: integral): float

fun @llvm.int_to_double(int: integral): double
