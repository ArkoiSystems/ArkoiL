Language faults:

- Assignment confusion: 
    Using := to assign a value and = for an equality check

- Null usage:
    Using maybe/optional symbol '?' instead of null values. 
    So a '?' will make it possible to have an 'undef' value,
    which you can catch with an 'else'. For example:

    fun test<string>(greeting?: string) = greeting else "Hello, World";

    This method will return the given greeting message if it's defined
    or "Hello, World" if not.
    Everything else need to be declared and so there is no necessary 
    if/else statement which needs to check, if something exists or not.

- Dangling else: (https://en.wikipedia.org/wiki/Dangling_else)
    Using different parsing technique for statement, so they can be read
    easiler.

- No silent integer overflows like in Java:
    https://en.wikipedia.org/wiki/Integer_overflow

Features: 

- Easy HOF (Higher Order Function)
    A function can take another function as an argument (lambda). 
    For example:

    fun newValue<int>(value: int, lambda?: [int] -> int) {
        return lambda(value) else value
    }

    fun another<int>(value: int) = value + 3;

    Because we are using the optional symbol on the lambda parameter,
    newValue(undef, 3) and newValue(another, 3) will be a valid function 
    call and so both of them get executed. Also inline lambda functions 
    can be created using the "[] -> {}" or "[] -> " syntax:

    newValue(3, another)
    newValue(3, [x: int] -> x + 3)
    
- Const / Var variables:
    There are two ways to create a variable. The first one 'const' will make
    a variable which can't change the reference. These type of variables cant
    have the optional/maybe flag '?' because they would need to change for it.

    To use the optional/maybe flag '?' or if you just want to change reference
    of an variable you can use the 'var' keyword. You can change the reference
    of these variables and also make them optional. 

    For global variables the 'const' variable is recommended because it's easier
    to understand, which reference the variable owns and so it makes the process
    easier to understand the program.
    
- Integers:
Integer literals are not limited by size, so you can create every
imaginable integer size like int32, int9 etc.
Also 
